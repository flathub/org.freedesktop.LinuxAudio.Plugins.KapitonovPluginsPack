--- kpp-vst3/VST_SDK/VST3_SDK/cmake/modules/PlatformToolset.cmake	2020-09-25 19:59:26.450444825 -0400
+++ kpp-vst3/VST_SDK/VST3_SDK/cmake/modules/PlatformToolset.cmake-new	2020-09-25 20:02:25.215625232 -0400
@@ -34,14 +34,14 @@
             link_libraries(c++)
         else()
             set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
-            set(CMAKE_CXX_STANDARD 14)
+            set(CMAKE_CXX_STANDARD 17)
             set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-multichar")
             add_compile_options(-Wsuggest-override)     # Suggest override when missing 
             if(ANDROID)
                 set(CMAKE_ANDROID_STL_TYPE c++_static)
                 link_libraries(dl)
              else()
-                link_libraries(stdc++fs pthread dl)
+                link_libraries(pthread dl)
             endif()
         endif()
     #------------
--- kpp-vst3/VST_SDK/VST3_SDK/public.sdk/source/common/threadchecker_linux.cpp	2020-07-31 04:58:08.000000000 -0400
+++ kpp-vst3/VST_SDK/VST3_SDK/public.sdk/source/common/threadchecker_linux.cpp-new	2020-09-25 19:51:27.112595999 -0400
@@ -38,6 +38,7 @@
 
 #if SMTG_OS_LINUX
 
+#include <stdio.h>
 #include <pthread.h>
 
 //------------------------------------------------------------------------
--- kpp-vst3/VST_SDK/VST3_SDK/public.sdk/source/vst/hosting/module_linux.cpp	2020-07-31 04:58:08.000000000 -0400
+++ kpp-vst3/VST_SDK/VST3_SDK/public.sdk/source/vst/hosting/module_linux.cpp-new	2020-09-25 19:58:48.664983973 -0400
@@ -39,7 +39,7 @@
 #include "../utility/stringconvert.h"
 #include <algorithm>
 #include <dlfcn.h>
-#include <experimental/filesystem>
+#include <filesystem>
 #include <sys/types.h>
 #include <sys/utsname.h>
 #include <unistd.h>
@@ -69,7 +69,7 @@
 	return {unameData.machine};
 }
 
-using Path = std::experimental::filesystem::path;
+using Path = std::filesystem::path;
 //------------------------------------------------------------------------
 Optional<Path> getApplicationPath ()
 {
@@ -119,7 +119,7 @@
 
 	static Optional<Path> getSOPath (const std::string& inPath)
 	{
-		using namespace std::experimental;
+		using namespace std;
 
 		Path modulePath {inPath};
 		if (!filesystem::is_directory (modulePath))
@@ -197,7 +197,7 @@
 void findFilesWithExt (const std::string& path, const std::string& ext, Module::PathList& pathList,
                        bool recursive = true)
 {
-	using namespace std::experimental;
+	using namespace std;
 
 	try
 	{
@@ -260,7 +260,7 @@
 	PathList list;
 	if (auto homeDir = getenv ("HOME"))
 	{
-		std::experimental::filesystem::path homePath (homeDir);
+		std::filesystem::path homePath (homeDir);
 		homePath /= ".vst3";
 		findModules (homePath.generic_u8string (), list);
 	}
@@ -281,7 +281,7 @@
 //------------------------------------------------------------------------
 Module::SnapshotList Module::getSnapshots (const std::string& modulePath)
 {
-	using namespace std::experimental;
+	using namespace std;
 
 	SnapshotList result;
 	filesystem::path path (modulePath);
--- kpp-vst3/VST_SDK/VST3_SDK/public.sdk/samples/vst/mda-vst3/source/mdaPianoProcessor.cpp	2020-07-31 04:58:08.000000000 -0400
+++ kpp-vst3/VST_SDK/VST3_SDK/public.sdk/samples/vst/mda-vst3/source/mdaPianoProcessor.cpp-new	2020-09-25 20:11:03.982954726 -0400
@@ -18,6 +18,7 @@
 #include "mdaPianoController.h"
 #include "mdaPianoData.h"
 
+#include <stdio.h>
 #include <math.h>
 
 namespace Steinberg {
